@model IEnumerable<string>
@{
	ViewData["Title"] = "Home Page";
}
<link rel="shortcut icon" href="~/TemplateData/favicon.ico">
<link rel="stylesheet" href="~/TemplateData/style.css">
<script src="~/Build/Game.loader.js"></script>

<input type="button" value="Splash!" onclick="Game.SendMessage('Player', 'Splash');" />
<input type="button" value="Emit!" onclick="Game.SendMessage('Player', 'Emit', 1000);" />

<form asp-action="Index" asp-controller="Home" method="post">

	<div id="Code" style="background:#adadad;">
		<textarea readonly rows="3" style="background: #adadad; color:whitesmoke; font-weight: 500; width: 100%; resize: none; border: none; outline: none; padding: 0; margin: 0;">
		public int Calc(int n)
		{
			//Введи сюда свой код</textarea>

		<textarea rows="3" name="methodContent" style="background:#a0a0a0; color:whitesmoke; font-weight:500; width:100%; resize:none; border:none; outline:none; padding:0; margin:0; padding-left: 80px;">
			@ViewBag.MethodContent</textarea>

		<textarea readonly rows="1" style="background: #adadad; color:whitesmoke; font-weight: 500; width: 100%; resize: none; border: none; outline: none; padding: 0; margin: 0;">
		}</textarea>

		@{
			if (Model != null)
			{
				foreach (var item in Model)
				{
					<p>@item</p>
				}
			}
		}

		<input type="submit" value="Тест" />
	</div>

</form>

<script>
	let allTextAreas = document.getElementsByTagName('textarea');
	for (var i = 0; i < allTextAreas.length; i++) {

		allTextAreas[i].addEventListener('keydown', function (e) {
			if (e.key == 'Tab') {
				e.preventDefault();
				var start = this.selectionStart;
				var end = this.selectionEnd;

				// set textarea value to: text before caret + tab + text after caret
				this.value = this.value.substring(0, start) +
					"\t" + this.value.substring(end);

				// put caret at right position again
				this.selectionStart =
					this.selectionEnd = start + 1;
			}
		});
	}
</script>


<!-- Unity -->
<div id="unity-container" class="unity-container">
	<canvas id="unity-canvas" class="unity-canvas" tabindex="0" width=960 height=600></canvas>
	<div id="unity-warning" class="unity-warning"> </div>
</div>

<!-- Unity -->
<script>
	var container = document.querySelector("#unity-container");
	var canvas = document.querySelector("#unity-canvas");
	var warningBanner = document.querySelector("#unity-warning");

	// Shows a temporary message banner/ribbon for a few seconds, or
	// a permanent error message on top of the canvas if type=='error'.
	// If type=='warning', a yellow highlight color is used.
	// Modify or remove this function to customize the visually presented
	// way that non-critical warnings and error messages are presented to the
	// user.
	function unityShowBanner(msg, type) {
		function updateBannerVisibility() {
			warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
		}
		var div = document.createElement('div');
		div.innerHTML = msg;
		warningBanner.appendChild(div);
		if (type == 'error') div.style = 'background: red; padding: 10px;';
		else {
			if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
			setTimeout(function () {
				warningBanner.removeChild(div);
				updateBannerVisibility();
			}, 5000);
		}
		updateBannerVisibility();
	}

	var buildUrl = "Build";
	var loaderUrl = buildUrl + "/Game.loader.js";
	var config = {
		dataUrl: buildUrl + "/Game.data",
		frameworkUrl: buildUrl + "/Game.framework.js",
		codeUrl: buildUrl + "/Game.wasm",
		streamingAssetsUrl: "StreamingAssets",
		companyName: "DefaultCompany",
		productName: "My project",
		productVersion: "1.0",
		showBanner: unityShowBanner,
	};

	var script = document.createElement("script");
	script.src = loaderUrl;
	script.onload = () => {
		createUnityInstance(canvas, config, (progress) => {
			// loading ...
		})
			.then((unityInstance) => {
				Game = unityInstance;
				onGameLoaded();
			})
			.catch((message) => {
				alert(message);
			});
	};
	document.body.appendChild(script);
</script>


<script>
	var Game;
	var Canvas = document.getElementById('unity-canvas');

	function onGameLoaded() {

		Canvas.addEventListener("focusin",
			() => Game.SendMessage('Configurator', 'SetInputActive', 1)
		);

		Canvas.addEventListener("focusout",
			() => Game.SendMessage('Configurator', 'SetInputActive', 0)
		);

		Game.SendMessage('Configurator', 'SetInputActive', 0);
	}

</script>